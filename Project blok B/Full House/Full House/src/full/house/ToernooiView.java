/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package full.house;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tim
 */
public class ToernooiView extends javax.swing.JPanel {

    MainWindow window;
    Connection conn;
    
    /**
     * Creates new form SpelerView
     */
    public ToernooiView () {
        initComponents();
    }
    
    public ToernooiView (MainWindow window, Connection conn) {
        initComponents();
        this.window = window;
        this.conn = conn;
        getToernooien();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        toernooiTable = new javax.swing.JTable();
        addToernooiBtn = new javax.swing.JButton();
        editToernooiBtn = new javax.swing.JButton();
        deleteToernooiBtn = new javax.swing.JButton();
        viewInschrijvingenBtn = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));

        toernooiTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Locatie", "Datum", "Inschrijvingen", "Max", "Inleg", "Spelers per tafel", "Totaal inleg"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        toernooiTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(toernooiTable);
        toernooiTable.getColumnModel().getColumn(0).setResizable(false);
        toernooiTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        toernooiTable.getColumnModel().getColumn(1).setMinWidth(40);
        toernooiTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        toernooiTable.getColumnModel().getColumn(1).setMaxWidth(150);
        toernooiTable.getColumnModel().getColumn(2).setMinWidth(30);
        toernooiTable.getColumnModel().getColumn(2).setPreferredWidth(65);
        toernooiTable.getColumnModel().getColumn(2).setMaxWidth(70);
        toernooiTable.getColumnModel().getColumn(3).setMinWidth(30);
        toernooiTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        toernooiTable.getColumnModel().getColumn(3).setMaxWidth(120);
        toernooiTable.getColumnModel().getColumn(4).setMinWidth(40);
        toernooiTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        toernooiTable.getColumnModel().getColumn(4).setMaxWidth(60);
        toernooiTable.getColumnModel().getColumn(5).setResizable(false);
        toernooiTable.getColumnModel().getColumn(5).setPreferredWidth(60);
        toernooiTable.getColumnModel().getColumn(6).setMinWidth(30);
        toernooiTable.getColumnModel().getColumn(6).setPreferredWidth(90);
        toernooiTable.getColumnModel().getColumn(6).setMaxWidth(100);
        toernooiTable.getColumnModel().getColumn(7).setMinWidth(30);
        toernooiTable.getColumnModel().getColumn(7).setPreferredWidth(100);
        toernooiTable.getColumnModel().getColumn(7).setMaxWidth(200);

        addToernooiBtn.setText("<html><div align=center>Nieuw<br>toernooi</div></html>");
        addToernooiBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addToernooiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToernooiBtnMouseClicked(evt);
            }
        });

        editToernooiBtn.setText("<html><div align=center>Bewerk<br>toernooi</div></html>");
        editToernooiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editToernooiBtnMouseClicked(evt);
            }
        });

        deleteToernooiBtn.setText("<html><div align=center>Verwijder<br>toernooi</div></html>");
        deleteToernooiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteToernooiBtnMouseClicked(evt);
            }
        });

        viewInschrijvingenBtn.setText("<html><div align=center>Bekijk<br>inschrijvingen</div></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewInschrijvingenBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addToernooiBtn, deleteToernooiBtn, editToernooiBtn, viewInschrijvingenBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewInschrijvingenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addToernooiBtn, deleteToernooiBtn, editToernooiBtn, viewInschrijvingenBtn});

    }// </editor-fold>//GEN-END:initComponents

    private void addToernooiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToernooiBtnMouseClicked
        AddToernooi addToernooi = new AddToernooi(this);
        addToernooi.setLocation(300, 150);
        addToernooi.setVisible(true);
    }//GEN-LAST:event_addToernooiBtnMouseClicked

    private void editToernooiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editToernooiBtnMouseClicked
        int[] row = toernooiTable.getSelectedRows();
        if (row.length > 1) {
            System.out.println("More than one toernooi selected!");
        } else if (row.length == 0) {
            System.out.println("No toernooi selected!");
        } else {
            Toernooi toernooi = getToernooiFromTable(row[0]);
            EditToernooi editToernooi = new EditToernooi(this, toernooi);
            editToernooi.setLocation(200, 150);
            editToernooi.setVisible(true);
        }
    }//GEN-LAST:event_editToernooiBtnMouseClicked

    private void deleteToernooiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteToernooiBtnMouseClicked
        int confirm = JOptionPane.showConfirmDialog(null, "Weet U zeker dat U dit toernooi wilt verwijderen?", "Verwijder toernooi?", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int[] rows = toernooiTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                int id = Integer.parseInt(toernooiTable.getValueAt(rows[i], 0).toString());
                deleteToernooi(id);
            }
        }
    }//GEN-LAST:event_deleteToernooiBtnMouseClicked

    private void getToernooien () {
        String query = "SELECT * FROM Toernooi;";
        try {
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            fillTable(result);
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    
    public void addToernooi (Toernooi toernooi) {
        String query = "INSERT INTO Toernooi(locatieID, datum, maximumSpelers, inlegGeld, spelersPerTafel, totaalInleg)"
                + "VALUES(?,?,?,?,?,?)";
        try {
            PreparedStatement stat = conn.prepareStatement(query);
            stat.setInt(1, toernooi.locatieID);
            stat.setDate(2, toernooi.datum);
            stat.setInt(3, toernooi.maxSpelers);
            stat.setInt(4, toernooi.inleg);
            stat.setInt(5, toernooi.spelersPerTafel);
            stat.setInt(6, toernooi.totaalInleg);
            
            stat.executeUpdate();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
        getToernooien();
    }
    
    public void fillTable(ResultSet result) throws SQLException {
        String[] columnNames = {"ID", "Locatie", "Datum", "Inschrijvingen", "Max. inschrijvingen", "Spelers per tafel", "Inleg", "Totaal inleg"};
        DefaultTableModel model = new TableModel();
        model.setDataVector(new Object[][]{}, columnNames);
        while (result.next()) {
            String ID = result.getString("toernooiID");
            ID = FullHouse.addZeroes(ID, 4);
            String locatieID = result.getString("locatieID");
            locatieID = FullHouse.addZeroes(locatieID, 4);
            String datum = result.getString("datum");
            int inschrijvingen = 0;//result.getInt("inschrijvingen");
            int maxSpelers = result.getInt("maximumSpelers");
            int spelersPerTafel = result.getInt("spelersPerTafel");
            int inleg = result.getInt("inlegGeld");
            int totaalInleg = result.getInt("totaalInleg");
            Object[] rowData = {ID, locatieID, datum, inschrijvingen, maxSpelers, spelersPerTafel, inleg, totaalInleg};
            model.addRow(rowData);
        }
        toernooiTable.setModel(model);
        setColumnWidth(toernooiTable);
        result.close();
    }
    
    public void editToernooi (Toernooi toernooi) {
        String query = "UPDATE Toernooi SET locatieID=?, datum=?, maximumSpelers=?,"
                + "inlegGeld=?, spelersPerTafel=?, totaalInleg=? WHERE toernooiID=?;";
        try {
            PreparedStatement stat = conn.prepareStatement(query);
            stat.setInt(1, toernooi.locatieID);
            stat.setDate(2, toernooi.datum);
            stat.setInt(3, toernooi.maxSpelers);
            stat.setInt(4, toernooi.inleg);
            stat.setInt(5, toernooi.spelersPerTafel);
            stat.setInt(6, toernooi.totaalInleg);
            stat.setInt(7, toernooi.ID);
            
            stat.executeUpdate();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
        getToernooien();
    }
    
    public void deleteToernooi (int id) {
        String query = "DELETE FROM Toernooi WHERE toernooiID = ?;";
        try {
            PreparedStatement stat = conn.prepareStatement(query);
            stat.setInt(1, id);
            stat.executeUpdate();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
        
        getToernooien();
    }
    
    private Toernooi getToernooiFromTable (int row) {
        int id = Integer.parseInt(toernooiTable.getValueAt(row, 0).toString());
        int locatieID = Integer.parseInt(toernooiTable.getValueAt(row, 1).toString());
        Date datum = Date.valueOf(toernooiTable.getValueAt(row, 2).toString());
        int maxSpelers = Integer.parseInt(toernooiTable.getValueAt(row, 4).toString());
        int inleg = Integer.parseInt(toernooiTable.getValueAt(row, 6).toString());
        int spelersPerTafel = Integer.parseInt(toernooiTable.getValueAt(row, 5).toString());
        int totaalInleg = Integer.parseInt(toernooiTable.getValueAt(row, 7).toString());
        Toernooi toernooi = new Toernooi(id, locatieID, datum, maxSpelers, inleg, spelersPerTafel, totaalInleg);
        return toernooi;
    }
    
    private void setColumnWidth (JTable table) {
        TableColumnModel tcm = table.getColumnModel();
        
        tcm.getColumn(0).setMaxWidth(35);
        tcm.getColumn(0).setPreferredWidth(35);
        tcm.getColumn(0).setMinWidth(35);
        tcm.getColumn(1).setMaxWidth(60);
        tcm.getColumn(1).setPreferredWidth(40);
        tcm.getColumn(2).setPreferredWidth(70);
        tcm.getColumn(3).setPreferredWidth(100);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        tcm.getColumn(6).setPreferredWidth(60);
        tcm.getColumn(7).setPreferredWidth(90);
        
        DefaultTableCellRenderer Renderer = new DefaultTableCellRenderer();
        Renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        tcm.getColumn(0).setCellRenderer(Renderer);
        tcm.getColumn(1).setCellRenderer(Renderer);
        tcm.getColumn(3).setCellRenderer(Renderer);
        tcm.getColumn(4).setCellRenderer(Renderer);
        tcm.getColumn(5).setCellRenderer(Renderer);
        tcm.getColumn(6).setCellRenderer(Renderer);
        tcm.getColumn(7).setCellRenderer(Renderer);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToernooiBtn;
    private javax.swing.JButton deleteToernooiBtn;
    private javax.swing.JButton editToernooiBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable toernooiTable;
    private javax.swing.JButton viewInschrijvingenBtn;
    // End of variables declaration//GEN-END:variables
}
