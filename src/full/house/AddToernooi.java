/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package full.house;

import java.sql.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;


/**
 *
 * @author Tim
 */
public class AddToernooi extends javax.swing.JFrame {

    ToernooiView parent;
    
    
    /**
     * Creates new form AddUserFrame
     */
    public AddToernooi(ToernooiView parent) {
        this.parent = parent;
        initComponents();
        getLocaties();
        getSoorten();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addUserLbl = new javax.swing.JLabel();
        naamLbl = new javax.swing.JLabel();
        voorlettersLbl = new javax.swing.JLabel();
        postcodeLbl = new javax.swing.JLabel();
        prijsField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        dayBox = new javax.swing.JComboBox();
        monthBox = new javax.swing.JComboBox();
        yearBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        locatieCB = new javax.swing.JComboBox();
        soortCB = new javax.swing.JComboBox();
        minSpelersField = new javax.swing.JTextField();
        maxSpelersField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nieuw toernooi");

        addUserLbl.setText("Voeg toernooi toe");

        naamLbl.setText("locatie:");

        voorlettersLbl.setText("datum:");

        postcodeLbl.setText("prijs:");

        addBtn.setText("Add");
        addBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBtnMouseClicked(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });

        dayBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        monthBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december" }));

        yearBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2014", "2015", "2016", "2017", "2018", "2019", "2020" }));

        jLabel1.setText("soort toernooi:");

        jLabel2.setText("min. spelers:");

        jLabel3.setText("max. spelers:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addUserLbl)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(voorlettersLbl)
                            .addComponent(naamLbl)
                            .addComponent(postcodeLbl)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(locatieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(maxSpelersField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(minSpelersField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(prijsField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(soortCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addUserLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(naamLbl)
                    .addComponent(locatieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(voorlettersLbl)
                    .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prijsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postcodeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(soortCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minSpelersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(maxSpelersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(cancelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBtnMouseClicked
        if (addToernooi()) {
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_addBtnMouseClicked

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelBtnMouseClicked

    private boolean addToernooi () {
        String query = "INSERT INTO Evenement(locatieID, datum, prijs) "
                + "VALUES(?, ?, ?)";
        String query2 = "SELECT evenementID FROM Evenement "
                + "WHERE locatieID = ? AND datum = ? AND prijs = ?";
        String query3 = "INSERT INTO Toernooi(evenementID, maximumSpelers, minimumSpelers, soortToernooi) "
                + "VALUES(?, ?, ?, ?);";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            PreparedStatement stat2 = conn.prepareStatement(query2);
            PreparedStatement stat3 = conn.prepareStatement(query3);
            
            ModelItem item = (ModelItem) locatieCB.getSelectedItem();
            int locatieID = item.id;
            Date datum = getDatum();
            int prijs = Integer.parseInt(prijsField.getText());
            item = (ModelItem) soortCB.getSelectedItem();
            int soort = item.id;
            int minSpelers = Integer.parseInt(minSpelersField.getText());
            int maxSpelers = Integer.parseInt(maxSpelersField.getText());
            
            stat.setInt(1, locatieID);
            stat.setDate(2, datum);
            stat.setInt(3, prijs);
            
            stat2.setInt(1, locatieID);
            stat2.setDate(2, datum);
            stat2.setInt(3, prijs);
            
            if (checkDate(locatieID, datum)) {
                stat.executeUpdate();

                ResultSet result = stat2.executeQuery();
                int evenementID = getEvenementID(result);

                if (evenementID > 0) {
                    stat3.setInt(1, evenementID);
                    stat3.setInt(2, maxSpelers);
                    stat3.setInt(3, minSpelers);
                    stat3.setInt(4, soort);

                    stat3.executeUpdate();
                }

                result.close();
                stat.close();
                stat2.close();
                stat3.close();
            }
            else {
                JOptionPane.showMessageDialog(this, "Er is op deze datum al een toernooi op deze locatie.", "Locatie onbeschikbaar", JOptionPane.ERROR_MESSAGE);
                stat.close();
                stat2.close();
                stat3.close();
                return false;
            }
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
            return false;
        }
        parent.getToernooien();
        return true;
    }
    
    private void getLocaties () {
        String query = "SELECT locatieID, naam FROM Locatie;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            fillBox(locatieCB, result);
            
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    
    private void getSoorten () {
        String query = "SELECT soortID, beschrijving from ToernooiSoort;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            fillBox(soortCB, result);
            
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    
    private void fillBox (JComboBox box, ResultSet result) throws SQLException  {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        while (result.next()) {
            int id = result.getInt(1);
            String beschrijving = result.getString(2);
            ModelItem item = new ModelItem(id, beschrijving);
            model.addElement(item);
        }
        
        box.setModel(model);
    }
    
    /*
     * Controleert of de locatie beschikbaar is op de gegeven datum.
     * @param locatieID De gegeven locatie.
     * @param datum De gegeven datum.
     * @return Returns true als de locatie beschikbaar is.
     */
    private boolean checkDate (int locatieID, Date datum) throws SQLException {
        String query = "SELECT * FROM Evenement WHERE locatieID = ? AND datum = ?;";
        Connection conn = SimpleDataSource.getConnection();
        PreparedStatement stat = conn.prepareStatement(query);
        
        stat.setInt(1, locatieID);
        stat.setDate(2, datum);
        
        ResultSet result = stat.executeQuery();
        if (result.next()) {
            return false;
        }
        else {
            return true;
        }
    }
    
    private Date getDatum () {
        int day = Integer.parseInt((String) dayBox.getSelectedItem());
        int month = monthBox.getSelectedIndex()+1;
        int year = Integer.parseInt((String) yearBox.getSelectedItem());
        Date datum = Date.valueOf(year + "-" + month + "-" + day);
        return datum;
    }
    
    private int getEvenementID (ResultSet result) throws SQLException {
        if(result.first()) {
            return result.getInt("evenementID");
        }
        else {
            return -1;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel addUserLbl;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JComboBox dayBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox locatieCB;
    private javax.swing.JTextField maxSpelersField;
    private javax.swing.JTextField minSpelersField;
    private javax.swing.JComboBox monthBox;
    private javax.swing.JLabel naamLbl;
    private javax.swing.JLabel postcodeLbl;
    private javax.swing.JTextField prijsField;
    private javax.swing.JComboBox soortCB;
    private javax.swing.JLabel voorlettersLbl;
    private javax.swing.JComboBox yearBox;
    // End of variables declaration//GEN-END:variables
}
