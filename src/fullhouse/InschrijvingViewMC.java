/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fullhouse;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Zhamin
 */
public class InschrijvingViewMC extends javax.swing.JFrame {

    /**
     * Creates new form InschrijvingViewMC
     */
    int evenementID;

    public InschrijvingViewMC(int evenementID) {
        initComponents();
        this.evenementID = evenementID;
        getInschrijvingen();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mcInschrijvingTable = new javax.swing.JTable();
        paidButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mcInschrijvingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mcInschrijvingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(mcInschrijvingTable);

        paidButton.setText("Betaald");
        paidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Verwijder");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paidButton, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 174, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonMouseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        deleteInschrijving();
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void paidButtonMouseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidButtonMouseClicked
        setIsBetaald();
    }//GEN-LAST:event_paidButtonMouseClicked

    private void getInschrijvingen() {
        String query = "SELECT I.spelerID, voorletters, isBetaald, naam FROM Inschrijving I "
                + "JOIN Speler S ON I.spelerID = S.spelerID "
                + "WHERE EvenementID = ? "
                + "ORDER BY naam;";
        try {
            Connection conn = Dataconnection.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            stat.setInt(1, evenementID);
            ResultSet result = stat.executeQuery();
            fillTable(result);
            result.close();
            stat.close();
        } catch (SQLException e) {
            FullHouse.showDBError(e);
        }
    }

    private void fillTable(ResultSet result) throws SQLException {
        String[] columnNames = {"Speler id", "Naam", "Voorletters", "Betaald"};
        DefaultTableModel model = new TableModel();
        model.setDataVector(new Object[][]{}, columnNames);

        while (result.next()) {
            int spelerID = result.getInt("spelerID");
            String naam = result.getString("naam");
            String voorletters = result.getString("voorletters");
            boolean betaald = result.getBoolean("isBetaald");

            Object[] rowData = {spelerID, naam, voorletters, betaald};
            model.addRow(rowData);
        }
        mcInschrijvingTable.setModel(model);
    }

    private void deleteInschrijving() {
        int[] rows = mcInschrijvingTable.getSelectedRows();
        if(rows.length == 0){
            JOptionPane.showMessageDialog(this, "Geen inschrijving geselecteerd", "Verwijder inschrijving", JOptionPane.ERROR_MESSAGE);
        }else if(rows.length >= 2){
            JOptionPane.showMessageDialog(this, "Meer dan één inschrijving geselecteerd", "Verwijder inschrijving", JOptionPane.ERROR_MESSAGE);
        }
        else{
            int confirm = JOptionPane.showConfirmDialog(null, "Weet u zeker dat u deze inschrijving wilt verwijderen?", "Verwijder inschrijving", JOptionPane.YES_NO_OPTION);
            if(confirm == JOptionPane.YES_OPTION) {
                int spelerID = Integer.parseInt(mcInschrijvingTable.getValueAt(rows[0], 0).toString());
                deleteQuery(spelerID);
            }
        }
    }

    private void deleteQuery(int spelerID) {
        String query = "DELETE FROM Inschrijving WHERE spelerID = ? AND evenementID = ?;";
        try {
            Connection conn = Dataconnection.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            
            stat.setInt(1, spelerID);
            stat.setInt(2, evenementID);
            stat.executeUpdate();
            
            stat.close();
        } catch (SQLException e) {
            FullHouse.showDBError(e);
        }
        getInschrijvingen();
    }
    
    private void setIsBetaald(){
        int[] rows = mcInschrijvingTable.getSelectedRows();
        for(int i = 0; i < rows.length; i++){
            int spelerID = Integer.parseInt(mcInschrijvingTable.getValueAt(rows[i], 0).toString());
            isBetaaldQuery(spelerID);
        }
    }
    
    private void isBetaaldQuery(int spelerID){
        String query = "UPDATE Inschrijving SET isBetaald = true "
                + "WHERE evenementID = ? AND spelerID = ?;";
        try{
            Connection conn = Dataconnection.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            
            stat.setInt(1, evenementID);
            stat.setInt(2, spelerID);
            stat.executeUpdate();
            
            stat.close();
        }
        catch(SQLException e){
            FullHouse.showDBError(e);
        }
        getInschrijvingen();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mcInschrijvingTable;
    private javax.swing.JButton paidButton;
    // End of variables declaration//GEN-END:variables
}
